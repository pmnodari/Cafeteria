1-Creamos el repositorio en GitHub y se crea la carpeta index, y el primer commit para realizar la primera conexión.

2-Ejecutamos npm init, y con este se crea el package.json. Es un archivo que nos indica la informacion adicinal de nuestro sitio web. Su finalidad es mantener un historial de los paquetes instalados y optimizar la forma en que se generan las dependencias del proyecto y los contenidos de la carpeta node_modules/ .

3-Lo anterior es necesario para instalar las dependencias. 
npm install --save-dev gulp
Las dependencias puedes ser de desarrollo o de producción. Las dependencias de desarrollo son aquellas que son necesarias para la creacion de la aplicacion, pero no en la produccion. Ejemplo es SASS, lo utilizaremos para el desarrollo de la App, pero no se compilara en el servidor, dado que SASS creara la hoja de estilo que es la necesaria para ello.

4-De la instalacion anterior se crean 2 archivos mas el package-lock.json, y el node_module. Este ultimo posee todos lo paquetes para que funcione gulp, y el package-lock.json lleva el registro de las dependencias instaladas. Por lo general, el node_module se pone el gitignore.

5-Se crea otra carpeta gulpfile.js. Esta carpeta es reconocida por gulp, y va buscar en el las tareas, y de ahi va a empezar a realizar todo lo que se pida a gulp: minificar imagenes, compilar una hoja de estilo, etc

6-Realizamos un ejemplo para verificar que todo ande bien. 
Gulp se crea una function y dentro de ella lo que se quiere que haga, a su vez, necesita que se le indique que la tarea finalizo, ello se hace con el callback done().
Luego para utilizar la tarea creada se usa la palabra exports, seguido del nombre que se quiera, y a ello se le asigna la function anteriormente creada.

7-Compilamos SASS con Gulp.
Para ello creamo en la raiz la carpeta src, y dentro de ella la carpeta scss. Y dentro de este el archivo app.scss
Ahora si uno quisiera utilizar el app.scss en el html, no se podria dado que el navegador no entiende scss, sino css.
Para ello sera necesario dos dependencias a instalar con npm: sass y gulp-sass. La primera es la que entiende toda la tecnologia sass, es decir sus sintaxis, mientras que gulp-sass solo nos conecta con el archivo gulpfile.js.

8-Para que el html entienda o reconozca lo que se hace el archivo app.scss, debemos crear la logica en el archivo gulpfile.js. 
Ahí creamos la funcion css, y la exportamos. Pero debemos importar gulp y gulp-sass, con la palabra require. Esto es porque en el node-module estan todas la librerias que se necesitan, y debemos traerla i importarla a donde seran utilizadas.
En gulp aparece los {} porque se traen varias funciones, mientras que en gulp-sass solo se importa sass. Esta dada su ultima actualizacion se agrega require('sass'), para indicar que este es requerido.
Ya con esto se siguen los pasos del ejemplo, y solo basta compilarlo con gulp css.
Este crea la carpeta build con el archivo especificado.

9-Con src es el source y donde buscara el archivo a compilar. Luego los pipe para indicar la proxima tarea (analogia del armado de la hamburguesa).
sass() es la compilacion, el ultimo pipe, para indicar donde se guardara el archivo, para ello se llama a dest(), y se le pasa como argumento la ruta, con el nombre, en donde se gurdara el archivo con la extension css.

10-Hasta aqui todo funciona pero ante cada cambio en el archivo app.scss debemo volver a compilar gulp: gulp css (en el ejemplo)
Para solucionar esto crearemos un watch. Esto es cuando se escribe codigo CSS y se quiere que se tomen los cambios. Y gulp ya tiene una API para esto.

11-Al igual que se hizo con la funcion css, lo hacemos con dev, donde se usa un callback: watch() que recibe dos parametros: 1-lo que se estara observando, y que se quiere que haga cuando cambie. En el ejemplo que mire el archivo:'src/scss/app.scss', y que ejecute la funcion 'css'.
Ejecutamos gulp dev

12-Dentro del pipe sass(), se puede pasar como argumento un objeto. Y unas de sus propiedades es el outputStyle, que recibe un valor de 'compressed'. Esto permite mimificar la hoja de estilo directamente cuando se compila.

13-Se agregan tres dependencias mas: autoprefixer y gulp-postcss, y postcss. Y luego se importan.
Luego en package.json se agrega un "browserslist" que son los navegadores que no son compatibles con algunas mejoras de css como flexbox. 
Estas dependencia haran que nuestros codigo sean de los mas modernos y compatible con todos los navegadores, agregando justamente lo prefijos necesarios para ello. 
Como recomendacion no es seguro darle soporte a IE (Internet explore). Para ello solo se le dara soporte a las ultimas versiones y los que sea utilizado en un porcentaje mayor al 1%.

14-Tareas por default. Justamente son aquellas tareas que no se especifica. Ya que se ejecuta el comando gulp, a secas.
Pero igualmente se puede asignar multiples tareas.
Para el ejemplo se importan series y parellel.
Ambas son modos en que se inician las tareas, aunque la mas recomendada es series. Y en este caso siempre es mejor dejar las de watch al final, dado que es la que se quedara mirando los cambios e ir aplicandolos.

15-Dividir el codigo SASS en archivos. Ejemplo header.
El _ significa que este codigo sera incluido en otro archivo. Por lo tanto, no sera compilado directamente como si lo hace app.scss, por medio de app.css.
Lo que hacemos es llamar en app.scss, con el decorador @use al _header, marcandole la ruta.
Tener en cuenta que los cambios que se realicen en _header.scss no son escuchados por el watch, este solo escucha el archivo app.scss.

16-Escuchar todos los archivos .scss. Una forma es especificar cada archivo scss, pero en proyectos complejos podria ser muy extenso. Entonces, gulp ofrece lo que se llama comodines. Estos son los **
Se especifica la ruta hasta la carpeta que contiene todos los .scss ->watch('src/scss/**/*.scss', css);
Y luego a traves de @use se usa en app.scss.
Recordar el ; es obligatorio en SASS.

17-Creando Variables en SASS. Limpiamos todo lo hecho hasta ahora.

18-Se crea la carpeta base. Y dentro de ella los archivos _variables, _normalize, y _globales.scss.

19-En la carpeta base se agrega el archivo _index.scss, que nos permitira es listar todos los archivos scss que se encuentren en dicha carpeta. Para ello se utiliza @forward-> indica que el archivo se incluya pero no que compile, esta es la diferencia con @use, que si los compila.

20-Entonces, en app.scss al usar @use 'base', este ira a la carpeta base y buscara el _index.scss, compilara todos los archivos ahi incluidos.

21-Importar Variables de Otros archivos. Anteriormente vimos como traer un archivo y compilarlo. Pero ahora debemos usar la variables de esos archivos .scss, como lo es _variables.scss. 
Usamos @use 'variables', y luego en el elemento html o etiqueta traemos el nombre de la variable precedido del nombre del archivo scss en referencia->variables.$fuente_principal
Se puede usar una alias con "as".

22-Agregamos codigo a los globales, y a utilidades.

23-Cada vez que se quiera agregar una lista de archivos scss, en la carpeta que los contendra se creara un index.scss. Y en el los @forward de cada archivo scss.

24-Iniciamos con el armado de la pagina Cafeteria.

25-header.
Aqui se inicia los primeros pasos con el html. Este contendra una imagen de fondo, una barra general, compuesta por un logo y una barra de navegacion. Y por ultimo, un texto central.

26-Se configura el cargado o compilado de imagenes. La idea es que gulp cargue las imagenes que solo necesitaremos y con el menor tamaño segun el navegador que soporta.

27-En gulpfile se crea la tarea o funcion imagenes, y se agrega el watch de dicha tarea en el dev. Lo que se hace aqui es que se lleve las imagenes a otro destino, para luego configurar que imagenes se van a cargar, para aligerar la carga de las mismas.

28-Para realizar la tarea de minimizar la imagenes se utiliza una dependencia de gulp: gulp-imagemin que se instala con npm.

29-El orden en las tareas en gulp es de suma importancia. En la funcion imagenes, previamente, buscaba las imagenes y las guardaba. Aplicar luego, el imagemin seria tarde, la idea es guardar las imagenes ya minificadas. 
imagemin es una funcion y recibe un objeto. El cual tiene una propiedad que se llama 'optimizationLevel'.
Tener en cuenta que a la fecha esta dependencia esta sin soporte. Y se instala una version anterior npm i -D gulp-imagemin@7.1.0.

30-Crear imagenes Webp con Gulp. Gulp permite, no solo compilar codigo SASS, sino muchas funciones mas como convertir cientos de imagenes en formato webp, que son mas ligeras. Recordar instalar la dependencia webp como desarrollo.

31-Crear imagenes Avif con Gulp. Lo mismo que el anterior pero en formato avif. Aunque este formato solo es soportado por Chrome, pero este navegador es utilizado por el 80%.

Cabe aclarar que con respecto a las vulnerabilidades al instalar un paquete con npm no hay que darle importancia dado que el node_module no se subira al sitio, solo es para el desarrollo, no asi la produccion.

Tanto para la convercion de las imagenes a Webp y a Avif. Se puede utilizar como opcion una variable objeto con la propiedad quelity:50 para optimizar mas las imagenes.

32-Iniciamos el maquetado del HEADER.
Agregamos el logo, y empezamos con el codigo css de la seccion header. REcordemos que tenemos las carpeta de cada seccion: _header.scss.
(NO OLVIDAR correr GULP para ver los cambios)

33-La anidacion con SASS es colocando dentro de la clase padre o contenedor, las clases hijas o etiquetas, es decir, al especificar una clase, y dentro de las llaves de esa, se coloca otra clase, asi se ira anidando en SASS y al compilar, se mostrara como la anidacion que se ve en CSS tradicional. Como recomendacion no mas de tres selectores.

34-Para acceder a los pseudoelementos se debe usar el simbolo & (&::before o &:hover). Este le indica a SASS que el pseudoelemento afecta a la etiqueta. Caso, contrario aparece un espacio en la compilacion, y se interpreta como si fuera una clase mas.

35-Mixin en SASS
Un mixin es un conjunto coherente de métodos y propiedades implementadas por otras interfaces y clases. La forma más común de llamar a un mixin y aplicar esas propiedades y métodos es el include (ejemplo @include nombre_del_mixin )
(@mixin bgColor($color){
    background-color:$color;
})

36-Se crean mixin para los Media queries, y un shorthand

37-Se crea el archivo barra.scss. Y lo que se hace es trabajar por componente. Primero se trabajo la estructura del header, luego la barra, que incluye el logo y la navegacion, posterior se le da estilo a la navegacion.















 